"""Implementa pagamentos fracionados

Revision ID: e9c1b2a3f4d5
Revises: 3a1b9c8d7e6f
Create Date: 2025-09-26 20:00:00.543210

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e9c1b2a3f4d5'
down_revision = '3a1b9c8d7e6f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Etapa 1: Criar a nova tabela 'pagamento'
    op.create_table('pagamento',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('valor', sa.Float(), nullable=False),
    sa.Column('forma', sa.String(length=50), nullable=False),
    sa.Column('id_venda', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_venda'], ['venda.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    # Etapa 2: Migrar os dados da tabela 'venda' para a nova tabela 'pagamento'
    # Define uma representação temporária das tabelas para manipular os dados
    venda_table = sa.table('venda',
        sa.column('id', sa.Integer),
        sa.column('total_venda', sa.Float),
        sa.column('forma_pagamento', sa.String)
    )
    pagamento_table = sa.table('pagamento',
        sa.column('valor', sa.Float),
        sa.column('forma', sa.String),
        sa.column('id_venda', sa.Integer)
    )

    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Busca todas as vendas existentes que ainda têm o campo antigo
    vendas_antigas = session.execute(sa.select(venda_table)).fetchall()

    pagamentos_para_criar = []
    for venda in vendas_antigas:
        # Garante que a forma de pagamento não seja nula antes de criar o pagamento
        if venda.forma_pagamento:
            pagamentos_para_criar.append({
                'valor': venda.total_venda,
                'forma': venda.forma_pagamento,
                'id_venda': venda.id
            })

    # Insere todos os novos pagamentos de uma vez para melhor performance
    if pagamentos_para_criar:
        op.bulk_insert(pagamento_table, pagamentos_para_criar)

    session.commit()

    # Etapa 3: Remover a coluna antiga 'forma_pagamento' da tabela 'venda'
    with op.batch_alter_table('venda', schema=None) as batch_op:
        batch_op.drop_column('forma_pagamento')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Etapa 1: Adicionar a coluna 'forma_pagamento' de volta à tabela 'venda'
    with op.batch_alter_table('venda', schema=None) as batch_op:
        batch_op.add_column(sa.Column('forma_pagamento', sa.VARCHAR(length=50), nullable=True))

    # Etapa 2: Migrar os dados de volta (melhor esforço, pode perder dados se houver pagamentos múltiplos)
    # Para cada venda, pega a forma do primeiro pagamento encontrado.
    op.execute("""
        UPDATE venda
        SET forma_pagamento = (
            SELECT forma FROM pagamento
            WHERE pagamento.id_venda = venda.id
            LIMIT 1
        )
    """)

    # Etapa 3: Deletar a tabela 'pagamento'
    op.drop_table('pagamento')

    # ### end Alembic commands ###